

//#include "headers/Global.h"
//#include "headers/map.h"
//#include "headers/view.h"
//#include  <sstream>

//class Player
//{
//private: float x, y = 0;
//public:
//    float w, h, dx, dy, speed;
//    int dir, playerScore, health;
//    bool life;
//    String File;
//    Image image;
//    Texture texture;
//    Sprite sprite;
//
//    Player(String F, int X, int Y, double W, double H) {
//        dir = 0; speed = 0; playerScore = 0; health = 100;
//        life = true;
//        File = F;
//        w = W; h = H;
//        image.loadFromFile("resources/images/" + File);
//        texture.loadFromImage(image);
//        sprite.setTexture(texture);
//        x = X; y = Y;
//        sprite.setTextureRect(IntRect(w, h, w, h));
//        sprite.setOrigin(w / 2, h / 2);
//    }
//
//    void update(float time)
//    {
//        switch (dir)
//        {
//        case 0: dx = speed; dy = 0; break;
//        case 1: dx = -speed; dy = 0; break;
//        case 2: dx = 0; dy = speed; break;
//        case 3: dx = 0; dy = -speed; break;
//        }
//
//        x += dx * time;
//        y += dy * time;
//
//        speed = 0;
//        sprite.setPosition(x + w / 2, y + h / 2);
//        InterectionWhithMap();
//        if (health <= 0)
//        {
//            life = false;
//
//        }
//
//    }
//
//    float getPlayerCoordX() {
//        return x;
//    }
//
//    float getPlayerCoordY() {
//        return y;
//    }
//
//    void InterectionWhithMap() {
//        for (int i = y / 32; i < (y + h) / 32; i++)
//            for (int j = x / 32; j < (x + w) / 32; j++)
//            {
//                if (TileMap[i][j] == '0')//если наш квадратик соответствует символу 0 (стена), то проверяем "направление скорости" персонажа:
//                {
//                    if (dy > 0)//если мы шли вниз,
//                    {
//                        y = i * 32 - h;//то стопорим координату игрек персонажа. сначала получаем координату нашего квадратика на карте(стены) и затем вычитаем из высоты спрайта персонажа.
//                    }
//                    if (dy < 0)
//                    {
//                        y = i * 32 + 32;//аналогично с ходьбой вверх. dy<0, значит мы идем вверх (вспоминаем координаты паинта)
//                    }
//                    if (dx > 0)
//                    {
//                        x = j * 32 - w;//если идем вправо, то координата Х равна стена (символ 0) минус ширина персонажа
//                    }
//                    if (dx < 0)
//                    {
//                        x = j * 32 + 32;//аналогично идем влево
//                    }
//                }
//
//                if (TileMap[i][j] == 's') { //если символ равен 's' (камень)
//                    playerScore += 5;
//                    TileMap[i][j] = ' ';//убираем камень, типа взяли бонус. можем и не убирать, кстати.
//                }
//
//                if (TileMap[i][j] == 'h') { //если символ равен 's' (камень)
//                    health += 20;
//                    TileMap[i][j] = ' ';//убираем камень, типа взяли бонус. можем и не убирать, кстати.
//                }
//
//                if (TileMap[i][j] == 'f') { //если символ равен 's' (камень)
//                    health -= 40;
//                    TileMap[i][j] = ' ';//убираем камень, типа взяли бонус. можем и не убирать, кстати.
//                }
//            }
//
//    }
//};
//

//int WinMain()
//{
//    RenderWindow window(sf::VideoMode(1024, 860), "Digger", sf::Style::Default);
//    view.reset(FloatRect(0, 0, 640, 480));
//
//    Font font;//шрифт 
//    font.loadFromFile("resources/fonts/ARIAL.TTF");//передаем нашему шрифту файл шрифта
//    Text text("", font, 17);//создаем объект текст. закидываем в объект текст строку, шрифт, размер шрифта(в пикселях);//сам объект текст (не строка)
//    text.setFillColor(Color::Yellow);
//    text.setStyle(sf::Text::Bold | sf::Text::Underlined);
//
//    Image map_image;//объект изображения для карты
//    map_image.loadFromFile("resources/images/map_new2.png");//загружаем файл для карты
//    Texture map;//текстура карты
//    map.loadFromImage(map_image);//заряжаем текстуру картинкой
//    Sprite s_map;//создаём спрайт для карты
//    s_map.setTexture(map);//заливаем текстуру спрайтом
//
//    Player player("hero.png", 250, 250, 43, 56);
//
//    float Curentframe = 0;
//    Clock clock;
//    Clock gameTimeClock;//переменная игрового времени, будем здесь хранить время игры 
//    int gameTime = 0;
//
//    randomMapGenerate();
//
//    while (window.isOpen())
//    {
//        float time = clock.getElapsedTime().asMicroseconds();
//
//        if (player.life) gameTime = gameTimeClock.getElapsedTime().asSeconds();//игровое время в секундах идёт вперед, пока жив игрок, перезагружать как time его не надо. оно не обновляет логику игры
//        clock.restart();
//        time = time / 800;
//
//        Event event;
//        while (window.pollEvent(event))
//        {
//            if (event.type == Event::Closed)
//                window.close();
//        }
//        if (player.life)
//        {
//            if (Keyboard::isKeyPressed(Keyboard::Left) || Keyboard::isKeyPressed(Keyboard::A)) {
//                player.dir = 1; player.speed = 0.2;
//                Curentframe += 0.005 * time;
//                if (Curentframe > 3) Curentframe -= 3;
//                player.sprite.setTextureRect(sf::IntRect(44 * int(Curentframe), 55, 45, 55));
//            }
//            if (Keyboard::isKeyPressed(Keyboard::Left) && Keyboard::isKeyPressed(Keyboard::LShift) || Keyboard::isKeyPressed(Keyboard::A)
//                && Keyboard::isKeyPressed(Keyboard::LShift)) {
//                player.dir = 1; player.speed = 0.3;
//                Curentframe += 0.005 * time;
//                if (Curentframe > 3) Curentframe -= 3;
//                player.sprite.setTextureRect(sf::IntRect(44 * int(Curentframe), 55, 45, 55));
//            }
//            if (Keyboard::isKeyPressed(Keyboard::Right) || Keyboard::isKeyPressed(Keyboard::D)) {
//                player.dir = 0; player.speed = 0.2;
//                Curentframe += 0.005 * time;
//                if (Curentframe > 3) Curentframe -= 3;
//                player.sprite.setTextureRect(sf::IntRect(44 * int(Curentframe), 0, 43, 55));
//            }
//            if (Keyboard::isKeyPressed(Keyboard::Right) && Keyboard::isKeyPressed(Keyboard::LShift) || Keyboard::isKeyPressed(Keyboard::D)
//                && Keyboard::isKeyPressed(Keyboard::LShift)) {
//                player.dir = 0; player.speed = 0.3;
//                Curentframe += 0.005 * time;
//                if (Curentframe > 3) Curentframe -= 3;
//                player.sprite.setTextureRect(sf::IntRect(44 * int(Curentframe), 0, 43, 55));
//            }
//
//            if (Keyboard::isKeyPressed(Keyboard::Up) || Keyboard::isKeyPressed(Keyboard::W)) {
//                player.dir = 3; player.speed = 0.2;
//                Curentframe += 0.005 * time;
//                if (Curentframe > 3) Curentframe -= 3;
//                player.sprite.setTextureRect(IntRect(50 * int(Curentframe), 166, 50, 55));
//            }
//            if (Keyboard::isKeyPressed(Keyboard::Up) && Keyboard::isKeyPressed(Keyboard::LShift) || Keyboard::isKeyPressed(Keyboard::W)
//                && Keyboard::isKeyPressed(Keyboard::LShift)) {
//                player.dir = 3; player.speed = 0.3;
//                Curentframe += 0.005 * time;
//                if (Curentframe > 3) Curentframe -= 3;
//                player.sprite.setTextureRect(IntRect(50 * int(Curentframe), 166, 50, 55));
//            }
//
//            if (Keyboard::isKeyPressed(Keyboard::Down) || Keyboard::isKeyPressed(Keyboard::S)) {
//                player.dir = 2; player.speed = 0.2;
//                Curentframe += 0.005 * time;
//                if (Curentframe > 3) Curentframe -= 3;
//                player.sprite.setTextureRect(IntRect(50 * int(Curentframe), 112, 50, 55));
//            }
//            if (Keyboard::isKeyPressed(Keyboard::Down) && Keyboard::isKeyPressed(Keyboard::LShift) || Keyboard::isKeyPressed(Keyboard::S)
//                && Keyboard::isKeyPressed(Keyboard::LShift)) {
//                player.dir = 2; player.speed = 0.3;
//                Curentframe += 0.005 * time;
//                if (Curentframe > 3) Curentframe -= 3;
//                player.sprite.setTextureRect(IntRect(50 * int(Curentframe), 112, 50, 55));
//            }
//        }
//
//        setPlayerCoordForView(player.getPlayerCoordX(), player.getPlayerCoordY());
//        player.update(time);
//        window.setView(view);
//        window.clear();
//
//        for (int i = 0; i < HEIGHT_MAP; i++) {
//            for (int j = 0; j < WIDTH_MAP; j++) {
//
//                if (TileMap[i][j] == ' ')  s_map.setTextureRect(IntRect(0, 0, 32, 32)); //если встретили символ пробел, то рисуем 1й квадратик
//                if (TileMap[i][j] == 's')  s_map.setTextureRect(IntRect(32, 0, 32, 32));//если встретили символ s, то рисуем 2й квадратик
//                if ((TileMap[i][j] == '0')) s_map.setTextureRect(IntRect(64, 0, 32, 32));//если встретили символ 0, то рисуем 3й квадратик
//                if ((TileMap[i][j] == 'f')) s_map.setTextureRect(IntRect(96, 0, 32, 32));//добавили цветок
//                if ((TileMap[i][j] == 'h')) s_map.setTextureRect(IntRect(128, 0, 32, 32));
//
//                s_map.setPosition(j * 32, i * 32);
//                window.draw(s_map);
//            }
//        }
//
//        std::ostringstream scoreString, healthString, gameTimeString;
//        healthString << player.health; scoreString << player.playerScore; gameTimeString << gameTime;
//
//        text.setString("Health: " + healthString.str() + "\tScore: " + scoreString.str() + "\tTime in game: " + gameTimeString.str() + "sec");//задает строку тексту
//        text.setPosition(view.getCenter().x - 300, view.getCenter().y - 240);//задаем позицию текста, центр камеры
//        window.draw(text);//рисую этот текст
//
//        window.draw(player.sprite);
//        window.display();
//
//    }
//
//    return 0;
//}