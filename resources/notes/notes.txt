#include "headers/Global.h"
#include "headers/map.h"
#include "headers/view.h"
#include <sstream>
#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <vector>
#include <list>
#include <ctime>


using namespace sf;


class Entity {
public:
    float dx, dy, x, y, speed, moveTimer;//добавили переменную таймер для будущих целей
    int w, h, health;
    bool life;
    Texture texture;
    Sprite sprite;
    String name;//враги могут быть разные, мы не будем делать другой класс для врага.всего лишь различим врагов по имени и дадим каждому свое действие в update в зависимости от имени
    Entity(Image& image, String Name, float X, float Y, int W, int H) {
        x = X; y = Y; w = W; h = H; name = Name; moveTimer = 0;
        speed = 0; health = 100; dx = 0; dy = 0;
        life = true; 
        texture.loadFromImage(image);
        sprite.setTexture(texture);
        sprite.setOrigin(w / 2, h / 2);
    }
    FloatRect getRect() {
        return FloatRect(x, y, w, h);
    }
};

class Enemy : public Entity
{
public:
    Enemy(Image& image, String Name, float X, float Y, int W, int H) : Entity(image, Name, X, Y, W, H)
    {
        if (name == "EasyEnemy")
        {
            sprite.setTextureRect(IntRect(11, 6, w, h));
            dx = 0.1;
        }
    }
    void checkCollisionWithMap(float Dx, float Dy)//ф ция проверки столкновений с картой
    {
        for (int i = y / 32; i < (y + h) / 32; i++)//проходимся по элементам карты
            for (int j = x / 32; j < (x + w) / 32; j++)
            {
                if (TileMap[i][j] == '0')//если элемент наш тайлик земли, то
                {
                    if (Dy > 0) { y = i * 32 - h; }//по Y вниз=>идем в пол(стоим на месте) или падаем. В этот момент надо вытолкнуть персонажа и поставить его на землю, при этом говорим что мы на земле тем самым снова можем прыгать
                    if (Dy < 0) { y = i * 32 + 32; }//столкновение с верхними краями карты(может и не пригодиться)
                    if (Dx > 0) { x = j * 32 - w; dx = -0.1; sprite.scale(-1, 1); }//с правым краем карты
                    if (Dx < 0) { x = j * 32 + 32; dx = 0.1; sprite.scale(-1, 1); }// с левым краем карты
                }
            }
    }

    void update(float time)
    {
        if (name == "EasyEnemy") {//для персонажа с таким именем логика будет такой

            //moveTimer += time;if (moveTimer>3000){ dx *= -1; moveTimer = 0; }//меняет направление примерно каждые 3 сек
            checkCollisionWithMap(dx, 0);//обрабатываем столкновение по Х
            x += dx * time;
            sprite.setPosition(x + w / 2, y + h / 2); //задаем позицию спрайта в место его центра
            if (health <= 0) { life = false; }
        }
    }
};

class Player : public Entity{
public:
    enum stateObjeckt { left, right, up, down, stay } state;
    int playerScore;

    Player(Image& image, String Name, float X, float Y, int W, int H) : Entity(image, Name, X, Y, W, H) {
        playerScore = 0; state = stay;
        if (name == "Player1")
        {
            sprite.setTextureRect(IntRect(0, 0, w, h));
        }
    }

    void update(float time)
    {
        control();
        switch (state)
        {
        case right: dx = speed; dy = 0; break;
        case left: dx = -speed; dy = 0; break;
        case up: dx = 0; dy = -speed; break;
        case down: dx = 0; dy = speed; break;
        case stay: dx = 0; dy = 0; break;
        }

        x += dx * time;
        checkCollisionWithMap(dx, 0);
        y += dy * time;
        checkCollisionWithMap(0, dy);
        sprite.setPosition(x + w / 2, y + h / 2);
        if (life) { setPlayerCoordForView(x, y); }
        if (!life) { setPlayerCoordForView(x+10000, y+10000); }
    }

    void control() {
        // Якщо життя менше або дорівнює нулю, гравець не може рухатися
        if (health <= 0) {
            state = stay;
            speed = 0;
            life = false;
            return;
        }

        // Визначення базової швидкості
        float baseSpeed = 0.2f;
        // Збільшена швидкість при утриманні Shift
        float boostSpeed = 0.3f;
        // Поточна швидкість залежить від натискання Shift
        float currentSpeed = (Keyboard::isKeyPressed(Keyboard::LShift) || Keyboard::isKeyPressed(Keyboard::RShift)) ? boostSpeed : baseSpeed;

        // Визначення напрямку руху
        state = stay;
        if (Keyboard::isKeyPressed(Keyboard::A)) {
            state = left;
        }
        else if (Keyboard::isKeyPressed(Keyboard::D)) {
            state = right;
        }
        else if (Keyboard::isKeyPressed(Keyboard::W)) {
            state = up;
        }
        else if (Keyboard::isKeyPressed(Keyboard::S)) {
            state = down;
        }

        // Обмеження руху по діагоналі
        if (state == left || state == right) {
            dy = 0;
        }
        if (state == up || state == down) {
            dx = 0;
        }

        speed = (state != stay) ? currentSpeed : 0.0f;
    }

    void checkCollisionWithMap(float Dx, float Dy) {
        for (int i = y / 32; i < (y + h) / 32; i++) {
            for (int j = x / 32; j < (x + w) / 32; j++) {
                if (TileMap[i][j] == '0') {
                    if (Dy > 0) { y = i * 32 - h; dy = 0; }
                    if (Dy < 0) { y = i * 32 + 32; dy = 0; }
                    if (Dx > 0) { x = j * 32 - w; dx = 0; }
                    if (Dx < 0) { x = j * 32 + 32; dx = 0; }
                }

                if (TileMap[i][j] == 's') {
                    playerScore += 5;
                    TileMap[i][j] = ' ';
                }

                if (TileMap[i][j] == 'h') {
                    health += 20;
                    TileMap[i][j] = ' ';
                }

                if (TileMap[i][j] == 'f') {
                    health -= 40;
                    TileMap[i][j] = ' ';
                }
            }
        }
    }
};

int WinMain() {
    RenderWindow window(sf::VideoMode(1024, 860), "Digger", sf::Style::Default);
    view.reset(FloatRect(500, 500, 920, 720));

    Font font;
    font.loadFromFile("resources/fonts/ARIAL.TTF");
    
    Text text("", font, 17);
    text.setFillColor(Color::Yellow);
    text.setStyle(sf::Text::Bold | sf::Text::Underlined);

  
    Image enemyImage;
    enemyImage.loadFromFile("resources/images/monster-spider.png");

    Image heroImage;
    heroImage.loadFromFile("resources/images/hero.png");

    Player player(heroImage,"Player1", 250, 250, 43, 55 );
    //Enemy easyEnemy(enemyImage, "EasyEnemy", 300, 400, 72, 66);

    std::list<Enemy*> enemies;

    std::srand(static_cast<unsigned>(std::time(nullptr)));
    
    for (int i = 0; i < 5; ++i) {
        float randomX = static_cast<float>(std::rand() % 800 + 100); // випадкова позиція по X у діапазоні [100, 900]
        float randomY = static_cast<float>(std::rand() % 600 + 100); // випадкова позиція по Y у діапазоні [100, 700]
        enemies.push_back(new Enemy(enemyImage, "EasyEnemy", randomX, randomY, 72, 66));
    }
    /*for (int i = 0; i < 5; ++i) {
        enemies.push_back(new Enemy(enemyImage, "EasyEnemy", 300 + i * 120, 400, 72, 66));
    }*/

   

    Clock clock;
    Clock gameTimeClock;
    int gameTime = 0;

    randomMapGenerate();

    while (window.isOpen()) {
        float time = clock.getElapsedTime().asMicroseconds();
        clock.restart();
        time = time / 800;

        if (player.life) {
            gameTime = gameTimeClock.getElapsedTime().asSeconds();
        }

        Event event;
        while (window.pollEvent(event)) {
            if (event.type == Event::Closed) {
                window.close();
            }
        }

        player.update(time);
        for (auto enemy : enemies) {
            enemy->update(time);
        }
        window.setView(view);
        window.clear();

        drawMap(window);

        std::ostringstream scoreString, healthString, gameTimeString;
        healthString << player.health;
        scoreString << player.playerScore;
        gameTimeString << gameTime;

        text.setString("Health: " + healthString.str() + "\tScore: " + scoreString.str() + "\tTime in game: " + gameTimeString.str() + " sec");
        text.setPosition(view.getCenter().x - 450, view.getCenter().y - 350);
        window.draw(text);

        window.draw(player.sprite);
        for (auto enemy : enemies) {
            window.draw(enemy->sprite);
        }
        window.display();
    }

    for (auto enemy : enemies) {
        delete enemy;
    }
   
    return 0;
}





_________________________________________________________________________________________________________________________



//#include "headers/Global.h"
//#include "headers/map.h"
//#include "headers/view.h"
//#include <sstream>
//#include <SFML/Graphics.hpp>
//#include <SFML/Window.hpp>
//#include <vector>
//#include <list>
//#include <ctime>
//
//
//using namespace sf;
//
//
//class Entity {
//public:
//    float dx, dy, x, y, speed, moveTimer;//добавили переменную таймер для будущих целей
//    int w, h, health;
//    bool life;
//    Texture texture;
//    Sprite sprite;
//    String name;//враги могут быть разные, мы не будем делать другой класс для врага.всего лишь различим врагов по имени и дадим каждому свое действие в update в зависимости от имени
//    Entity(Image& image, String Name, float X, float Y, int W, int H) {
//        x = X; y = Y; w = W; h = H; name = Name; moveTimer = 0;
//        speed = 0; health = 100; dx = 0; dy = 0;
//        life = true;
//        texture.loadFromImage(image);
//        sprite.setTexture(texture);
//        sprite.setOrigin(w / 2, h / 2);
//    }
//    FloatRect getRect() {
//        return FloatRect(x, y, w, h);
//    }
//
//    bool checkCollision(Entity& other) {
//        return sprite.getGlobalBounds().intersects(other.sprite.getGlobalBounds());
//    }
//};
//
//class Enemy : public Entity {
//public:
//    Enemy(Image& image, String Name, float X, float Y, int W, int H) : Entity(image, Name, X, Y, W, H) {
//        if (name == "EasyEnemy") {
//            sprite.setTextureRect(IntRect(11, 6, w, h));
//            dx = 0.1;
//        }
//    }
//
//    void checkCollisionWithMap(float Dx, float Dy) {
//        for (int i = y / 32; i < (y + h) / 32; i++)
//            for (int j = x / 32; j < (x + w) / 32; j++) {
//                if (TileMap[i][j] == '0') {
//                    if (Dy > 0) { y = i * 32 - h; }
//                    if (Dy < 0) { y = i * 32 + 32; }
//                    if (Dx > 0) { x = j * 32 - w; dx = -0.1; sprite.scale(-1, 1); }
//                    if (Dx < 0) { x = j * 32 + 32; dx = 0.1; sprite.scale(-1, 1); }
//                }
//            }
//    }
//
//    void update(float time) {
//        if (name == "EasyEnemy") {
//            checkCollisionWithMap(dx, 0);
//            x += dx * time;
//            sprite.setPosition(x + w / 2, y + h / 2);
//            if (health <= 0) { life = false; }
//        }
//    }
//};
//
//class Player : public Entity {
//public:
//    enum stateObjeckt { left, right, up, down, stay } state;
//    int playerScore;
//
//    Player(Image& image, String Name, float X, float Y, int W, int H) : Entity(image, Name, X, Y, W, H) {
//        playerScore = 0; state = stay;
//        if (name == "Player1") {
//            sprite.setTextureRect(IntRect(0, 0, w, h));
//        }
//    }
//
//    void update(float time) {
//        control();
//        switch (state) {
//        case right: dx = speed; dy = 0; break;
//        case left: dx = -speed; dy = 0; break;
//        case up: dx = 0; dy = -speed; break;
//        case down: dx = 0; dy = speed; break;
//        case stay: dx = 0; dy = 0; break;
//        }
//
//        x += dx * time;
//        checkCollisionWithMap(dx, 0);
//        y += dy * time;
//        checkCollisionWithMap(0, dy);
//        sprite.setPosition(x + w / 2, y + h / 2);
//        if (life) { setPlayerCoordForView(x, y); }
//        if (!life) { setPlayerCoordForView(x + 10000, y + 10000); }
//    }
//
//    void control() {
//        if (health <= 0) {
//            state = stay;
//            speed = 0;
//            life = false;
//            return;
//        }
//
//        float baseSpeed = 0.2f;
//        float boostSpeed = 0.3f;
//        float currentSpeed = (Keyboard::isKeyPressed(Keyboard::LShift) || Keyboard::isKeyPressed(Keyboard::RShift)) ? boostSpeed : baseSpeed;
//
//        state = stay;
//        if (Keyboard::isKeyPressed(Keyboard::A)) {
//            state = left;
//        }
//        else if (Keyboard::isKeyPressed(Keyboard::D)) {
//            state = right;
//        }
//        else if (Keyboard::isKeyPressed(Keyboard::W)) {
//            state = up;
//        }
//        else if (Keyboard::isKeyPressed(Keyboard::S)) {
//            state = down;
//        }
//
//        if (state == left || state == right) {
//            dy = 0;
//        }
//        if (state == up || state == down) {
//            dx = 0;
//        }
//
//        speed = (state != stay) ? currentSpeed : 0.0f;
//    }
//
//    void checkCollisionWithMap(float Dx, float Dy) {
//        for (int i = y / 32; i < (y + h) / 32; i++) {
//            for (int j = x / 32; j < (x + w) / 32; j++) {
//                if (TileMap[i][j] == '0') {
//                    if (Dy > 0) { y = i * 32 - h; dy = 0; }
//                    if (Dy < 0) { y = i * 32 + 32; dy = 0; }
//                    if (Dx > 0) { x = j * 32 - w; dx = 0; }
//                    if (Dx < 0) { x = j * 32 + 32; dx = 0; }
//                }
//
//                if (TileMap[i][j] == 's') {
//                    playerScore += 5;
//                    TileMap[i][j] = ' ';
//                }
//
//                if (TileMap[i][j] == 'h') {
//                    health += 20;
//                    TileMap[i][j] = ' ';
//                }
//
//                if (TileMap[i][j] == 'f') {
//                    health -= 40;
//                    TileMap[i][j] = ' ';
//                }
//            }
//        }
//    }
//};
//
//int WinMain() {
//    RenderWindow window(sf::VideoMode(1024, 860), "Digger", sf::Style::Default);
//    view.reset(FloatRect(500, 500, 920, 720));
//
//    Font font;
//    font.loadFromFile("resources/fonts/ARIAL.TTF");
//
//    Text text("", font, 17);
//    text.setFillColor(Color::Yellow);
//    text.setStyle(sf::Text::Bold | sf::Text::Underlined);
//
//    Text gameOverText("You lost", font, 100);
//    gameOverText.setFillColor(Color::Red);
//    gameOverText.setStyle(sf::Text::Bold);
//
//    Image enemyImage;
//    enemyImage.loadFromFile("resources/images/monster-spider.png");
//
//    Image heroImage;
//    heroImage.loadFromFile("resources/images/hero.png");
//
//    Player player(heroImage, "Player1", 250, 250, 43, 55);
//
//    std::list<Enemy*> enemies;
//    std::srand(static_cast<unsigned>(std::time(nullptr)));
//
//    for (int i = 0; i < 5; ++i) {
//        float randomX = static_cast<float>(std::rand() % 800 + 100);
//        float randomY = static_cast<float>(std::rand() % 600 + 100);
//        enemies.push_back(new Enemy(enemyImage, "EasyEnemy", randomX, randomY, 72, 66));
//    }
//
//    Clock clock;
//    Clock gameTimeClock;
//    int gameTime = 0;
//
//    randomMapGenerate();
//
//    while (window.isOpen()) {
//        float time = clock.getElapsedTime().asMicroseconds();
//        clock.restart();
//        time = time / 800;
//
//        if (player.life) {
//            gameTime = gameTimeClock.getElapsedTime().asSeconds();
//        }
//
//        Event event;
//        while (window.pollEvent(event)) {
//            if (event.type == Event::Closed) {
//                window.close();
//            }
//        }
//
//        if (player.life) {
//            player.update(time);
//            for (auto enemy : enemies) {
//                enemy->update(time);
//                if (player.checkCollision(*enemy)) {
//                    player.health -= 100;
//                    enemy->life = false; // видалення ворога або інша дія
//                    if (player.health <= 0) {
//                        player.life = false;
//                    }
//                }
//            }
//        }
//
//        window.setView(view);
//        window.clear();
//
//        if (player.life) {
//            drawMap(window);
//
//            std::ostringstream scoreString, healthString, gameTimeString;
//            healthString << player.health;
//            scoreString << player.playerScore;
//            gameTimeString << gameTime;
//
//            text.setString("Health: " + healthString.str() + "\tScore: " + scoreString.str() + "\tTime in game: " + gameTimeString.str() + " sec");
//            text.setPosition(view.getCenter().x - 450, view.getCenter().y - 350);
//            window.draw(text);
//
//            window.draw(player.sprite);
//            for (auto enemy : enemies) {
//                window.draw(enemy->sprite);
//            }
//        }
//        else {
//            RectangleShape background(Vector2f(1024, 860));
//            background.setFillColor(Color::Black);
//            window.draw(background);
//
//            FloatRect textRect = gameOverText.getLocalBounds();
//            gameOverText.setOrigin(textRect.left + textRect.width / 2.0f, textRect.top + textRect.height / 2.0f);
//            gameOverText.setPosition(view.getCenter().x, view.getCenter().y);
//            window.draw(gameOverText);
//        }
//
//        window.display();
//    }
//
//    for (auto enemy : enemies) {
//        delete enemy;
//    }
//
//    return 0;
//}
//